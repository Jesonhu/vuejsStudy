条件渲染
1 v-if

    1.1 简单使用
    <h1 class="h1" v-if="ok">yes</h1>
    <script>
            var  app1 = new Vue({
                el: '.h1',
                data: {
                    ok: true
                }
            });
        </script>

    <h2 class="h1" v-if="ok">yes</h2>
    <h2 v-else>no</h2>
    ok为true两个都显示，false只显示v-else部分

    1.2 template中的if条件组 ????
      v-if 是一个指令，需要将它添加到一个元素上。
      但是如果我们想切换多个元素呢？此时我们可以把一个 <template> 元素当做包装元素，
      并在上面使用 v-if。最终的渲染结果不会包含 <template> 元素。

      <template id="t1" v-if="ok">
              <h1>Title</h1>
              <p>段落1</p>
              <p>段落2</p>
          </template>

    1.3 v-else
        必须跟在v-if或v-else-if元素后面，否则无法识别

    1.4 v-else-if 2.1.0新增，可以链式使用多次
        必须跟在v-if 或v-else-if后面

    1.5 用key管理可复用的元素
        Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。
        这么做，除了使 Vue 变得非常快之外，还有一些有用的好处
        <template v-if="loginType === 'username'">
          <label>Username</label>
          <input placeholder="Enter your username">
        </template>
        <template v-else>
          <label>Email</label>
          <input placeholder="Enter your email address">
        </template>

        在上面的代码中切换 loginType 将不会清除用户已经输入的内容。
        因为两个模版使用了相同的元素，<input> 不会被替换掉——仅仅是替换了它的的 placeholder。

        <template v-if="loginType === 'username'">
          <label>Username</label>
          <input placeholder="Enter your username" key="username-input">
        </template>
        <template v-else>
          <label>Email</label>
          <input placeholder="Enter your email address" key="email-input">
        </template>
        每次input会被重新渲染 但label仍然被复用--未添加key值

    2 v-show
        2.1 另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样：
            <h1 v-show="ok">Hello!</h1>
            不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。
            v-show 是简单地切换元素的 CSS 属性 display 。
            注意， v-show 不支持 <template> 语法，也不支持 v-else。

        v-if与v-show比较
        v-if 是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。
        v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
        相比之下， v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。
        一般来说， v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，
        则使用 v-show 较好；如果在运行时条件不太可能改变，则使用 v-if 较好。

    2.2 v-if 与 v-for 一起使用
        当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。